syntax = 'proto3';

package beget.cloud.v1.cdnStatistic;

import "google/api/annotations.proto";
import "cloud/proto/v1/structures.proto";

// Статистика Cdn
//
// Предоставляет методы для для получения статистики по Cdn сервисам.
service CdnStatisticService {
    // Получить статистику о количестве запросов к Cdn
    //
    // Возвращает статистику о количестве запросов к Cdn за указанный период.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    rpc getRequest(GetRequestRequest) returns (GetRequestResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/cdn/{service_id}/statistic/count-request"
        };
    }

    // Получить статистику о использованном трафике
    //
    // Возвращает статистику о использованном исходящем трафике за указанный период.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    rpc getTraffic(GetTrafficRequest) returns (GetTrafficResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/cdn/{service_id}/statistic/traffic-usage"
        };
    }

    // Получить статистику о исходящем трафике
    //
    // Возвращает статистику о входящем/исходящем трафике за указанный период.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    rpc getNetwork(GetNetworkRequest) returns (GetNetworkResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/cdn/{service_id}/statistic/network"
        };
    }
}

message GetRequestRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Период за который нужна статистика
    structures.StatisticPeriod period = 2;
}

message GetRequestResponse {
    // Количество запросов с кодами 2xx
    structures.StatisticSeriesData code_2xx = 1;

    // Количество запросов с кодами 3xx
    structures.StatisticSeriesData code_3xx = 2;

    // Количество запросов с кодами 4xx
    structures.StatisticSeriesData code_4xx = 3;

    // Количество запросов с кодами 5xx
    structures.StatisticSeriesData code_5xx = 4;
}

message GetNetworkRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Период за который нужна статистика
    structures.StatisticPeriod  period = 2;
}

message GetNetworkResponse {
    // Скорость исходящего трафика, в КБ/с
    structures.StatisticSeriesData data_tx = 1;
}

message GetTrafficRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Период за который нужна статистика
    structures.StatisticPeriod  period = 2;
}

message GetTrafficResponse {
    // Суммарный объем данных скачанный из бакета, в байтах
    structures.StatisticSeriesData data_tx = 1;
}