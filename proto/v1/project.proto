syntax = 'proto3';

package beget.cloud.v1.project;

import "google/api/annotations.proto";

// Управление проектами
//
// Предоставляет набор методов для работы с проектами: создание, получение списка,
// изменение параметров и удаление проектов.
service ProjectService {
    // Получить список проектов
    //
    // Возвращает список проектов пользователя с поддержкой пагинации, фильтрации и сортировки.
    //
    // **Фильтрация:**
    //
    // Формат фильтра описан в разделе "Фильтрация и сортировка" описания API.
    // Пример: `name : "test" AND (region = "ru1" OR region = "ru2")`
    //
    // Поддерживаемые поля для фильтрации: `name`, `description`, `is_default`
    rpc getList (GetProjectListRequest) returns (GetProjectListResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/projects/list"
        };
    }

    // Создать проект
    //
    // Создает новый проект. Если у пользователя нет проекта по умолчанию, то
    // новый проект будет создан как проект по умолчанию.
    rpc create (CreateProjectRequest) returns (CreateProjectResponse) {
        option (google.api.http) = {
            post: "/v1/cloud/projects",
            body: "*"
        };
    }

    // Изменить параметры проекта
    //
    // Изменяет параметры проекта (название и описание). Поле is_default изменяться не может.
    // Для получения доступных идентификаторов проектов `project_id` необходимо использовать метод
    // "Получить список проектов" из API "Управление проектами".
    rpc update (UpdateProjectRequest) returns (UpdateProjectResponse) {
        option (google.api.http) = {
            put: "/v1/cloud/projects/{project_id}",
            body: "*"
        };
    }

    // Удалить проект
    //
    // Удаляет проект по его идентификатору. Проект по умолчанию удалить нельзя.
    // Для получения доступных идентификаторов проектов `project_id` необходимо использовать метод
    // "Получить список проектов" из API "Управление проектами".
    rpc remove (RemoveProjectRequest) returns (RemoveProjectResponse) {
        option (google.api.http) = {
            delete: "/v1/cloud/projects/{project_id}"
        };
    }
}

message GetProjectListRequest {
    // Смещение для пагинации
    uint32 offset = 1;

    // Лимит записей для пагинации
    uint32 limit = 2;

    // Фильтр для выборки проектов
    string filter = 3;
}

message GetProjectListResponse {
    oneof result {
        // Страница проектов с пагинацией
        ProjectPage page = 1;

        // Ошибка при получении списка проектов
        Error error = 2;
    }

    message ProjectPage {
        // Список проектов на текущей странице
        repeated Project projects = 1;

        // Общее количество доступных проектов
        uint32 total_count = 2;
    }

    message Error {}
}



message CreateProjectRequest {
    // Название проекта
    string name = 1;

    // Описание проекта (необязательное поле)
    string description = 2;
}

message CreateProjectResponse {
    // Результат запроса
    oneof result {
        // Информация о созданном проекте
        Project project = 1;

        // Ошибка при создании проекта
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Невалидное название проекта
            INVALID_PROJECT_NAME = 1;

            // Невалидное описание проекта
            INVALID_PROJECT_DESCRIPTION = 2;
        }
    }
}

message UpdateProjectRequest {
    // Идентификатор проекта в формате UUID
    string project_id = 1;

    // Название проекта
    string name = 2;

    // Описание проекта
    string description = 3;
}

message UpdateProjectResponse {
    // Результат запроса
    oneof result {
        // Информация об обновлённом проекте
        Project project = 1;

        // Ошибка при обновлении проекта
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Невалидное название проекта
            INVALID_PROJECT_NAME = 2;

            // Невалидное описание проекта
            INVALID_PROJECT_DESCRIPTION = 3;
        }
    }
}

message RemoveProjectRequest {
    // Идентификатор проекта в формате UUID
    string project_id = 1;
}

message RemoveProjectResponse {
    // Результат запроса
    oneof result {
        // Успешное удаление проекта
        Success success = 1;

        // Ошибка при удалении проекта
        Error error = 2;
    }

    message Success {}

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Нельзя удалить проект по умолчанию
            CANNOT_DELETE_DEFAULT_PROJECT = 2;
        }
    }
}

// Информация о проекте
message Project {
    // Уникальный идентификатор проекта в формате UUID
    string id = 1;

    // Название проекта
    string name = 2;

    // Описание проекта
    string description = 3;

    // Признак проекта по умолчанию
    bool is_default = 5;

    // Дата создания проекта в формате RFC3339
    string created_at = 7;

    // Дата последнего обновления в формате RFC3339
    string updated_at = 8;
}
