syntax = 'proto3';

package beget.cloud.v1.cloud;
import "google/api/annotations.proto";
import "cloud/proto/v1/mysql.proto";
// do not use structures.proto here for avoid recursive import

service CloudService {
    // get available services configurations fo create or change
    rpc getConfigurationList (GetConfigurationListRequest) returns (GetConfigurationListResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/configuration"
        };
    }

    // create service
    rpc create (CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/v1/cloud",
            body: "*"
        };
    }

    // get customer service by id
    rpc get (GetRequest) returns (GetResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/{service_id}"
        };
    }

    // get customer's service list
    rpc getList (GetListRequest) returns (GetListResponse) {
        option (google.api.http) = {
            get: "/v1/cloud"
        };
    }

    rpc update (UpdateRequest) returns (UpdateResponse){
        option (google.api.http) = {
            patch: "/v1/cloud/{service_id}",
            body: "*"
        };
    }

    // remove customer service
    rpc remove (RemoveRequest) returns (RemoveResponse) {
        option (google.api.http) = {
            delete: "/v1/cloud/{service_id}"
        };
    }

    // change configuration for service
    rpc changeConfiguration (ChangeConfigurationRequest) returns (ChangeConfigurationResponse) {
        option (google.api.http) = {
            patch: "/v1/cloud/{service_id}/configuration",
            body: "*"
        };
    }
}

message GetConfigurationListRequest {
}

message GetConfigurationListResponse {
    repeated ServiceConfiguration configuration = 1;
}

message CreateRequest {
    // configuration identifier
    string configuration_id = 1;

    // display name
    string display_name = 2;

    // description
    string description = 3;

    oneof params {
        mysql.CreateParams mysql_params = 4;
    }
}

message CreateResponse {
    oneof result {
        Service service = 1;
        mysql.CreateError mysql_error = 2;
    }
}

message GetRequest {
    string service_id = 1;
}

message GetResponse {
    Service service = 1;
}

message GetListRequest {
}

message GetListResponse {
    repeated Service service = 1;
}

message UpdateRequest {
    // service identifier
    string service_id = 1;

    // display name
    string display_name = 2;

    // custom description
    string description = 3;
}

message UpdateResponse {
    oneof result {
        Service service = 1;
        Error error = 2;
    }
    message Error {
        string message = 1;
        Code code = 2;

        enum Code {
            _ = 0;
            INVALID_DISPLAY_NAME = 1;
            INVALID_DESCRIPTION = 2;
        }
    }
}

message RemoveRequest {
    string service_id = 1;
}

message RemoveResponse {
    // 404 if not found
    Success success = 1;

    message Success {
    }
}

message ChangeConfigurationRequest {
    // service identifier
    string service_id = 1;

    // new configuration identifier
    string configuration_id = 2;
}

message ChangeConfigurationResponse {
    oneof result {
        Service service = 1;
        Error error = 2;
    }
    message Error {
        string message = 1;
        Code code = 2;

        enum Code {
            _ = 0;
            INVALID_STATE = 1;
            SERVICE_DISABLED = 2;
            INVALID_CONFIGURATION = 3;
            INSUFFICIENT_FUNDS = 4;
        }
    }
}

/////

message Service {
    // service identifier
    string id = 1;

    // configuration id
    string configuration_id = 2;

    // display name
    string display_name = 3;

    // custom description
    string description = 4;

    // service status
    Status status = 5;

    // created datetime, W3C
    string created_at = 6;

    // price per day
    double price_day = 7;

    // price per month
    double price_month = 8;

    oneof entity {
        mysql.Mysql5 mysql5 = 9;
        mysql.Mysql8 mysql8 = 10;
    }

    enum Status {
        CREATING = 0;
        RUNNING = 1;
        RESTARTING = 2;
        STOPPED = 3;
        RECONFIGURING = 4;
    }
}

message ServiceConfiguration {
    // configuration identifier
    string id = 1;

    // price per day
    double price_day = 2;

    // price per month
    double price_month = 3;

    oneof configuration {
        mysql.Mysql5Configuration mysql5 = 4;
        mysql.Mysql8Configuration mysql8 = 5;
    }
}