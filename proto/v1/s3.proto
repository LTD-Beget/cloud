syntax = 'proto3';

package beget.cloud.v1.s3;
import "google/api/annotations.proto";

// Управление S3
//
// Предоставляет набор методов для работы с S3 хранилищем.
service S3Service {
    // Получить информацию о квоте
    //
    // Возращает количество доступной квоты в рамках подписки, а также общее количество использованной квоты.
    rpc getQuota(GetQuotaRequest) returns (GetQuotaResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/s3/quota",
        };
    }

    // Изменить ключи доступа к бакету
    //
    // Меняет ключи доступа к бакету.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы" -> "Управление сервисами".
    rpc changeAccessKey(ChangeAccessKeyRequest) returns (ChangeAccessKeyResponse) {
        option (google.api.http) = {
            patch: "/v1/cloud/s3/{service_id}/access-key",
            body: "*"
        };
    }

    // Изменить политику доступа(CORS) бакета
    //
    // Меняет политику доступа(CORS) бакета.
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы" -> "Управление сервисами".
    rpc changeCors(ChangeCorsRequest) returns (ChangeCorsResponse) {
        option (google.api.http) = {
            patch: "/v1/cloud/s3/{service_id}/cors",
            body: "*"
        };
    }

    // Изменить доменое имя для доступа к бакету
    //
    // Меняет доменное имя для доступа к бакету.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы" -> "Управление сервисами".
    rpc changeDomain(ChangeDomainRequest) returns (ChangeDomainResponse) {
        option (google.api.http) = {
            patch: "/v1/cloud/s3/{service_id}/domain",
            body: "*"
        };
    }

    // Изменить тип доступа к бакету(публичный/приватный)
    //
    // Меняет тип доступа к бакету - без авторизации, либо с авторизацией по ключам.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы" -> "Управление сервисами".
    rpc changePublic(ChangePublicRequest) returns (ChangePublicResponse) {
        option (google.api.http) = {
            patch: "/v1/cloud/s3/{service_id}/public",
            body: "*"
        };
    }

    // Узнать тарификацию облачного хранилища S3
    //
    // Возвращает стоимость в день по подписке и стоимость в день дополнительной тарификации за 1 GB.
    rpc getPrice(GetPriceRequest) returns (GetPriceResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/s3/price",
        };
    }

    // Узнать префикс имени бакета
    //
    // Возвращает префикс имени бакета, который будет использован при создании бакета.
    rpc getPrefix(GetPrefixRequest) returns (GetPrefixResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/s3/prefix",
        };
    }

    // Включить/выключить доступ к бакету по FTP и SFTP
    rpc enableFtp(EnableFtpRequest) returns (EnableFtpResponse) {
        option (google.api.http) = {
            patch: "/v1/cloud/s3/{service_id}/enable-ftp",
            body: "*"
        };
    }
}

message GetQuotaRequest {
}

message GetQuotaResponse {
    // Общее количество используемой квоты(в том числе дополнительной) в MB
    uint32 used_size = 1;

    // Количество оставшейся квоты в MB доступной по подписке
    uint32 available_size = 2;
}

message ChangeAccessKeyRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;
}

message ChangeAccessKeyResponse {
    oneof result {
        // Результат запроса: информация о сервисе
        S3 s3 = 1;

        // Результат запроса: ошибка при обновлении информации о сервисе
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 6;
        }
    }
}

message ChangeCorsRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Список политик доступа CORS
    repeated Cors cors = 2;
}

message ChangeCorsResponse {
    oneof result {
        // Результат запроса: информация о сервисе
        S3 s3 = 1;

        // Результат запроса: ошибка при обновлении информации о сервисе
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 3;

            // Некорректный домен
            INVALID_DOMAIN = 5;
        }
    }
}

message ChangeDomainRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Доменое имя третьего уровня
    string fqdn = 2;
}

message ChangeDomainResponse {
    oneof result {
        // Результат запроса: информация о сервисе
        S3 s3 = 1;

        // Результат запроса: ошибка при обновлении информации о сервисе
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 3;

            // Домен не зарегистрирован
            DOMAIN_NOT_REGISTERED = 4;

            // У домена указаны NS сервера отличные от серверов Beget -
            // ns1.beget.com
            // ns2.beget.com
            // ns1.beget.pro
            // ns2.beget.pro
            DOMAIN_INCORRECT_NS = 5;

            // Домен не является доменом третьего уровня
            NOT_SUBDOMAIN = 6;

            // Домен не найден на аккаунте пользователя
            DOMAIN_NOT_FOUND = 7;
        }
    }
}

message ChangePublicRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Сделать бакет публичным/приватным
    bool public = 2;
}

message ChangePublicResponse {
    oneof result {
        // Результат запроса: информация о сервисе
        S3 s3 = 1;

        // Результат запроса: ошибка при обновлении информации о сервисе
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 3;
        }
    }
}

message EnableFtpRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Включить/выключить доступ
    bool enable = 2;
}

message EnableFtpResponse {
    oneof result {
        // Результат запроса: информация о сервисе
        S3 s3 = 1;

        // Результат запроса: ошибка при обновлении информации о сервисе
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 3;
        }
    }
}

message GetPriceRequest {
}

message GetPriceResponse {
    // Тарификация в день по подписке
    double rate_day = 1;

    // Дополнительная тарификация(сверх подписки) в день за 1 GB
    double rate_day_overload = 2;
}

message GetPrefixRequest {
}

message GetPrefixResponse {
    string prefix = 1;
}

message S3CreateParams {
    // Признак публичности репозитория
    bool public = 1;

    // Имя бакета, может содержать только латинские символы, цифры и знак `-`, при этом символ `-` не может быть в начале или конце названия или повторяться два раза подряд
    string bucket_name = 2;
}

message S3CreateError {
    // Описание ошибки
    string message = 1;

    // Код ошибки
    Code code = 2;

    enum Code {
        // Зарезервированный код ошибки
        _ = 0;

        // Недостаточно средств для создания сервиса
        INSUFFICIENT_FUNDS = 1;

        // Неизвестная конфигурация
        CONFIGURATION_NOT_FOUND = 2;

        // Некорректное название сервиса
        INVALID_DISPLAY_NAME = 4;

        // Бакет с таким именем уже существует
        BUCKET_NAME_ALREADY_EXISTS = 8;

        // Некорректное уникальное имя бакета
        INVALID_BUCKET_NAME = 9;

        // Создано максимально доступное количество бакетов
        BUCKET_LIMIT_REACHED = 10;

        // Некорректное описание бакета
        INVALID_DESCRIPTION = 11;
    }
}

message S3 {
    // Признак публичности бакета
    bool public = 1;

    // Имя пользователя для доступа к бакету
    string access_key = 2;

    // Пароль для доступа к бакету
    string secret_key = 3;

    // Доменое имя для доступа к бакету
    string fqdn = 4;

    // Политики доступа CORS
    repeated Cors cors = 5;

    // Используемая квота в MB
    uint32 quota_used_size = 6;

    // Данные о FTP доступе
    Ftp ftp = 7;

    // Данные о SFTP доступе
    Sftp sftp = 8;
}

message Ftp {
    string host = 1;
    uint32 port = 2;
    string login = 3;
    string password = 4;
    Status status = 5;

    enum Status {
        ENABLED = 0;
        DISABLED = 1;
        BLOCKED = 2;
    }
}

message Sftp {
    string host = 1;
    uint32 port = 2;
    string login = 3;
    string password = 4;
    Status status = 5;

    enum Status {
        ENABLED = 0;
        DISABLED = 1;
        BLOCKED = 2;
    }
}

message Cors {
    // Идентификатор политики доступа (необязательное поле при создании CORS)
    uint32 id = 1;

    // Список HTTP методов, доступны - GET/POST/PUT/DELETE/HEAD
    repeated string http_method = 2;

    // Список HTTP заголовков разрешенных в запросе к объекту
    repeated string access_control_allow_headers = 3;

    // Список HTTP заголовков доступных клиенту при обработке ответа сервера
    repeated string access_control_expose_headers = 6;

    // Время кеширования CORS для браузера
    uint64 cache_ttl = 4;

    // Домен для которого будет разрешен доступ к хранилищу
    string fqdn = 5;
}

message S3Configuration {
    // Доступное место по подписке
    uint32 subscription_disk_size = 1;

    // Стоимость за каждый последующий гигабайт сверх подписки в день
    double price_overload_day = 2;

    // Стоимость за каждый последующий гигабайт сверх подписки в месяц
    double price_overload_month = 3;
}