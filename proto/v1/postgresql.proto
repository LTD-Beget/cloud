syntax = 'proto3';

package beget.cloud.v1.postgresql;
import "google/api/annotations.proto";
import "cloud/proto/v1/structures.proto";

service PostgresqlService {
    rpc getConfig(PgGetConfigRequest) returns (PgGetConfigResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/postgresql/{service_id}/config",
        };
    }

    rpc setConfig(PgSetConfigRequest) returns (PgSetConfigResponse) {
        option (google.api.http) = {
            put: "/v1/cloud/postgresql/{service_id}/config",
            body: "*"
        };
    }

    rpc getDbList(PgGetDbListRequest) returns (PgGetDbListResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/postgresql/{service_id}/db",
        };
    }

    rpc createDb(PgCreateDbRequest) returns (PgCreateDbResponse) {
        option (google.api.http) = {
            post: "/v1/cloud/postgresql/{service_id}/db",
            body: "*"
        };
    }

    rpc updateDb(PgUpdateDbRequest) returns (PgUpdateDbResponse){
        option (google.api.http) = {
            patch: "/v1/cloud/postgresql/{service_id}/db/{db_name}",
            body: "*"
        };
    }

    rpc removeDb(PgRemoveDbRequest) returns (PgRemoveDbResponse) {
        option (google.api.http) = {
            delete: "/v1/cloud/postgresql/{service_id}/db/{db_name}",
        };
    }

    rpc getRoleList(PgGetRoleListRequest) returns (PgGetRoleListResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/postgresql/{service_id}/role"
        };
    }

    rpc createRole(PgCreateRoleRequest) returns (PgCreateRoleResponse) {
        option (google.api.http) = {
            post: "/v1/cloud/postgresql/{service_id}/role",
            body: "*"
        };
    }

    rpc updateRole(PgUpdateRoleRequest) returns (PgUpdateRoleResponse) {
        option (google.api.http) = {
            patch: "/v1/cloud/postgresql/{service_id}/role/{role_name}",
            body: "*"
        };
    }

    rpc removeRole(PgRemoveRoleRequest) returns (PgRemoveRoleResponse) {
        option (google.api.http) = {
            delete: "/v1/cloud/postgresql/{service_id}/role/{role_name}",
        };
    }

    rpc getRemoteAccess(PgGetRemoteAccessRequest) returns (PgGetRemoteAccessResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/postgresql/{service_id}/remote-access"
        };
    }

    rpc updateRemoteAccess(PgUpdateRemoteAccessRequest) returns (PgUpdateRemoteAccessResponse) {
        option (google.api.http) = {
            put: "/v1/cloud/postgresql/{service_id}/remote-access",
            body: "*"
        };
    }
}

message PgGetConfigRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;
}

message PgGetConfigResponse {
    // Информация о текущей конфигурации базы данных
    PgConfigInfo config = 1;
}

message PgSetConfigRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Список параметров для конфигурации базы данных
    map<string, string> param = 2;
}

message PgSetConfigResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о текущей конфигурации базы данных
        PgConfigInfo config = 1;

        // Результат запроса: ошибка при изменении конфигурации базы данных
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Некорректные параметры конфигурации
            INVALID_CONFIG_PARAMS = 3;
        }
    }
}

message PgGetDbListRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;
}

message PgGetDbListResponse {
    // Информация о базах данных
    repeated PgDb db = 1;
}

message PgCreateDbRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Название базы данных
    string db_name = 2;

    // Владелец создаваемой базы данных: имя существующей роли
    string owner_name = 3;

    // Описание базы данных (необязательное поле)
    string description = 4;
}

message PgCreateDbResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о базе данных
        PgDb db = 1;

        // Результат запроса: ошибка при создании базы данных
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Некорректное имя базы данных
            INVALID_DB_NAME = 3;

            // База данных с таким именем уже существует
            DB_ALREADY_EXISTS = 4;

            // Некорректное описание базы данных
            INVALID_DESCRIPTION = 5;

            // Имя базы данных зарезервировано системой
            DB_NAME_IS_RESERVED = 6;
        }
    }
}

message PgRemoveDbRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Имя базы данных
    string db_name = 2;
}

message PgRemoveDbResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: успешное удаление базы данных
        Success success = 1;

        // Результат запроса: ошибка при удалении базы данных
        Error error = 2;
    }

    message Success {
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;
        }
    }
}

message PgGetRoleListRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;
}

message PgGetRoleListResponse {
    repeated Role role = 1;
}

message PgCreateRoleRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Имя пользователя
    string role_name = 2;

    // Пароль
    string password = 3;

    // Список ролей наследуемых пользователем
    repeated string parent_role = 5;
}

message PgCreateRoleResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о пользователе
        Role role = 1;

        // Результат запроса: ошибка при создании пользователя
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Некорректное имя роли (пользователя)
            INVALID_ROLE_NAME = 3;

            // Некорректный пароль
            INVALID_PASSWORD = 4;

            // Создаваемая роль уже существует
            ROLE_ALREADY_EXISTS = 5;

            // Словарный пароль (находится в черном списке)
            BLACKLISTED_PASSWORD = 6;

            // Список родительских ролей содержит недопустимую роль
            INVALID_PARENT_ROLE_LIST = 7;

            // Имя роли зарезервировано системой
            ROLE_NAME_IS_RESERVED = 8;
        }
    }
}

message PgRemoveRoleRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Имя пользователя
    string role_name = 2;
}

message PgRemoveRoleResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: успешное удаление пользователя
        Success success = 1;

        // Результат запроса: ошибка удаления пользователя
        Error error = 2;
    }

    message Success {
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Пользователь является владельцем БД и не может быть удален
            ROLE_IS_DB_OWNER = 3;

            // Пользователь является предопределенным и не может быть удален
            ROLE_IS_PREDEFINED = 4;
        }
    }
}

message PgUpdateRoleRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Имя пользователя
    string role_name = 2;

    // Пароль
    string password = 3;

    // Список ролей наследуемых пользователем
    repeated string parent_role = 5;
}

message PgUpdateRoleResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о пользователе
        Role role = 1;

        // Результат запроса: ошибка изменения пользователя
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Некорректный пароль
            INVALID_PASSWORD = 3;

            // Словарный пароль (находится в черном списке)
            BLACKLISTED_PASSWORD = 4;

            // Список родительских ролей содержит недопустимую роль
            INVALID_PARENT_ROLE_LIST = 5;
        }
    }
}

message PgUpdateDbRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Имя базы данных
    string db_name = 2;

    // Описание базы данных
    string description = 3;
}

message PgUpdateDbResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о базе данных
        PgDb db = 1;

        // Результат запроса: ошибка изменения информации о базе данных
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректное описание
            INVALID_DESCRIPTION = 2;
        }
    }
}

message PgGetRemoteAccessRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;
}

message PgGetRemoteAccessResponse {
    PgRemoteAccessState state = 1;
}

message PgUpdateRemoteAccessRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Адрес подсети в формате IP/Маска, например: 192.168.1.1/24
    // Пустой список - внешний доступ запрещен
    repeated string subnet_address = 2;
}

message PgUpdateRemoteAccessResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: текущее состояние доступа со внешних адресов
        PgRemoteAccessState state = 1;

        // Результат запроса: ошибка добавления адреса подсети для внешнего доступа
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Некорректный формат адреса подсети
            INVALID_SUBNET_ADDRESS = 3;

            // IP уже добавлен или входит в ранее добавленную подсеть
            IP_IS_IN_EXISTED_SUBNET = 4;

            // Подсеть уже входит полностью или частично в добавленные ранее
            SUBNET_IS_IN_EXISTED_SUBNET = 5;

            // Подсеть является приватной
            SUBNET_IS_PRIVATE = 6;
        }
    }
}

message Postgresql15 {
    // Конфигурация базы данных
    Postgresql15Configuration configuration = 1;

    // Хост для подключения к базе данных
    string host = 2;

    // Порт для подключения к базе данных
    uint32 port = 3;

    // Адреса для доступа к управляемому сервису
    structures.AddressInfo address_info = 4;

    // Адрес веб-интерфейса для доступа к БД
    string webui_url = 5;

    // Размер использованного места на диске в байтах
    uint64 disk_used = 6;

    // Размер доступного места на диске в байтах
    uint64 disk_left = 7;

    // Включен ли режим "только для чтения"
    bool read_only = 8;

    // Веб-интерфейс для доступа к БД в процессе установки
    bool webui_installing = 9;
}

message Postgresql14 {
    // Конфигурация базы данных
    Postgresql15Configuration configuration = 1;

    // Хост для подключения к базе данных
    string host = 2;

    // Порт для подключения к базе данных
    uint32 port = 3;

    // Адреса для доступа к управляемому сервису
    structures.AddressInfo address_info = 4;

    // Адрес веб-интерфейса для доступа к БД
    string webui_url = 5;

    // Размер использованного места на диске в байтах
    uint64 disk_used = 6;

    // Размер доступного места на диске в байтах
    uint64 disk_left = 7;

    // Включен ли режим "только для чтения"
    bool read_only = 8;

    // Веб-интерфейс для доступа к БД в процессе установки
    bool webui_installing = 9;
}

message PgCreateParams {
    // Имя базы данных
    string db_name = 1;

    // Имя пользователя
    string role_name = 2;

    // Пароль для доступа к базе данных
    string password = 3;

    // Список параметров для конфигурации базы данных (необязательное поле)
    map<string, string> param = 4;
}

message PgCreateError {
    // Описание ошибки
    string message = 1;

    // Код ошибки
    Code code = 2;

    enum Code {
        // Зарезервированный код ошибки
        _ = 0;

        // Недостаточно средств для создания сервиса
        INSUFFICIENT_FUNDS = 1;

        // Неизвестная конфигурация
        CONFIGURATION_NOT_FOUND = 2;

        // Некорректное название сервиса
        INVALID_DISPLAY_NAME = 3;

        // Некорректное описание
        INVALID_DESCRIPTION = 4;

        // Некорректное имя базы данных
        INVALID_DB_NAME = 5;

        // Некорректное имя пользователя (роли)
        INVALID_ROLE_NAME = 6;

        // Некорректный пароль
        INVALID_PASSWORD = 7;

        // Создание временно недоступно
        TEMPORARILY_UNAVAILABLE = 8;

        // Создание недоступно
        SERVICE_DISABLED = 9;

        // Словарный пароль (пароль находится в черном списке)
        BLACKLISTED_PASSWORD = 10;

        // Некорректные параметры конфигурации
        INVALID_CONFIG_PARAMS = 11;

        // Имя базы данных зарезервировано системой
        DB_NAME_IS_RESERVED = 12;

        // Имя пользователя зарезервировано системой
        ROLE_NAME_IS_RESERVED = 13;
    }
}

message Postgresql15Configuration {
    // Количество ядер процессора
    uint32 cpu_count = 1;

    // Размер диска в MB
    uint32 disk_size = 2;

    // Размер памяти в MB
    uint32 memory = 3;

    // Версия PostgreSQL
    string version = 4;

    // Отображаемая версия PostgreSQL
    string display_version = 5;

    // Список доступных параметров для конфигурации базы данных
    repeated structures.ParamConfig param_config = 6;

    // Список параметров по умолчанию для конфигурации базы данных
    map<string, string> param_default = 7;
}

message Postgresql14Configuration {
    // Количество ядер процессора
    uint32 cpu_count = 1;

    // Размер диска в MB
    uint32 disk_size = 2;

    // Размер памяти в MB
    uint32 memory = 3;

    // Версия PostgreSQL
    string version = 4;

    // Отображаемая версия PostgreSQL
    string display_version = 5;

    // Список доступных параметров для конфигурации базы данных
    repeated structures.ParamConfig param_config = 6;

    // Список параметров по умолчанию  для конфигурации базы данных
    map<string, string> param_default = 7;
}

message PgDb {
    // Имя базы данных
    string name = 1;

    // Размер базы данных в байтах
    uint64 size = 2;

    // Имя пользователя владельца базы данных
    string owner = 3;

    // Описание базы данных
    string description = 5;
}

message Role {
    // Имя пользователя
    string name = 1;

    // Пароль пользователя
    string password = 2;

    // Список ролей наследуемых пользователем
    repeated string parent_role = 4;

    // Является ли пользователь предопределенным
    bool predefined = 5;
}

message PgConfig {
    // Список параметров для конфигурации базы данных
    map<string, string> param = 1;

    // Список параметров по умолчанию  для конфигурации базы данных
    map<string, string> param_default = 2;
}

message PgRemoteAccessState {
    // Список Адресов подсети в формате IP/Маска, например: 192.168.1.1/24
    // Пустой список - внешний доступ запрещен
    repeated string subnet_address = 1;
}

message PgConfigInfo {
    // Список параметров по умолчанию  для конфигурации базы данных
    map<string, string> param_default = 1;

    // Список доступных параметров для конфигурации базы данных
    repeated structures.ParamConfig param_config = 2;

    // Список текущих параметров для конфигурации базы данных
    map<string, string> param = 3;
}
