syntax = 'proto3';

package beget.cloud.v1.postgresql.postgresql;
import "google/api/annotations.proto";
import "cloud/proto/v1/structures.proto";

service PostgresqlService {
    rpc getConfig(GetConfigRequest) returns (GetConfigResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/postgresql/{service_id}/config",
        };
    }

    rpc setConfig(SetConfigRequest) returns (SetConfigResponse) {
        option (google.api.http) = {
            put: "/v1/cloud/postgresql/{service_id}/config",
            body: "*"
        };
    }

    rpc getDbList(GetDbListRequest) returns (GetDbListResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/postgresql/{service_id}/db",
        };
    }

    rpc createDb(CreateDbRequest) returns (CreateDbResponse) {
        option (google.api.http) = {
            post: "/v1/cloud/postgresql/{service_id}/db",
            body: "*"
        };
    }

    rpc updateDb(UpdateDbRequest) returns (UpdateDbResponse){
        option (google.api.http) = {
            patch: "/v1/cloud/postgresql/{service_id}/db/{db_name}",
            body: "*"
        };
    }

    rpc removeDb(RemoveDbRequest) returns (RemoveDbResponse) {
        option (google.api.http) = {
            delete: "/v1/cloud/postgresql/{service_id}/db/{db_name}",
        };
    }

    rpc getRoleList(GetRoleListRequest) returns (GetRoleListResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/postgresql/{service_id}/role"
        };
    }

    rpc createRole(CreateRoleRequest) returns (CreateRoleResponse) {
        option (google.api.http) = {
            post: "/v1/cloud/postgresql/{service_id}/role",
            body: "*"
        };
    }

    rpc updateRole(UpdateRoleRequest) returns (UpdateRoleResponse) {
        option (google.api.http) = {
            patch: "/v1/cloud/postgresql/{service_id}/role/{role_name}",
            body: "*"
        };
    }

    rpc removeRole(RemoveRoleRequest) returns (RemoveRoleResponse) {
        option (google.api.http) = {
            delete: "/v1/cloud/postgresql/{service_id}/role/{role_name}",
        };
    }

    rpc getRemoteAccessState(GetRemoteAccessStateRequest) returns (GetRemoteAccessStateResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/postgresql/{service_id}/remote-access"
        };
    }

    rpc updateRemoteAccess(UpdateRemoteAccessRequest) returns (UpdateRemoteAccessResponse) {
        option (google.api.http) = {
            patch: "/v1/cloud/postgresql/{service_id}/remote-access"
        };
    }
}

message GetConfigRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;
}

message GetConfigResponse {
    // Параметры базы данных
    Config config = 1;
}

message SetConfigRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Список параметров для конфигурации базы данных
    map<string, string> param = 2;

    // Тип конфигурации базы данных default/custom (необязательное поле)
    string preset_name = 3;
}

message SetConfigResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о текущей конфигурации базы данных
        Config config = 1;

        // Результат запроса: ошибка при изменении конфигурации базы данных
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Некорректные параметры конфигурации
            INVALID_CONFIG_PARAMS = 3;
        }
    }
}

message GetDbListRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;
}

message GetDbListResponse {
    // Информация о базах данных
    repeated Db db = 1;
}

message CreateDbRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Название базы данных
    string db_name = 2;

    // Владелец создаваемой базы данных: имя существующей роли
    string owner_name = 3;

    // Описание базы данных (необязательное поле)
    string description = 4;
}

message CreateDbResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о базе данных
        Db db = 1;

        // Результат запроса: ошибка при создании базы данных
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Некорректное имя базы данных
            INVALID_DB_NAME = 3;

            // База данных с таким именем уже существует
            DB_ALREADY_EXISTS = 4;

            // Некорректный пароль
            ROLE_INVALID_ACCESS_PASSWORD = 5;

            // Некорректное описание базы данных
            INVALID_DESCRIPTION = 6;

            // Словарный пароль (находится в черном списке)
            ROLE_BLACKLISTED_ACCESS_PASSWORD = 7;

            // Имя базы данных зарезервировано системой
            DB_NAME_IS_RESERVED = 8;
        }
    }
}

message RemoveDbRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Имя базы данных
    string db_name = 2;
}

message RemoveDbResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: успешное удаление базы данных
        Success success = 1;

        // Результат запроса: ошибка при удалении базы данных
        Error error = 2;
    }

    message Success {
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Имя базы данных зарезервировано системой
            DB_NAME_IS_RESERVED = 3;
        }
    }
}

message GetRoleListRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;
}

message GetRoleListResponse {
    repeated Role role = 1;
}

message CreateRoleRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Имя пользователя
    string role_name = 2;

    // Пароль
    string password = 3;

    // Сохранить пароль для доступа из Adminer
    bool save_adminer_password = 4;

    // Список ролей наследуемых пользователем
    repeated string parent_role = 5;
}

message CreateRoleResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о пользователе
        Role role = 1;

        // Результат запроса: ошибка при создании пользователя
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Некорректное имя роли
            INVALID_ROLE_NAME = 3;

            // Некорректный пароль
            INVALID_ACCESS_PASSWORD = 4;

            // Создаваемая роль уже существует
            ROLE_ALREADY_EXISTS = 5;

            // Словарный пароль (находится в черном списке)
            BLACKLISTED_ACCESS_PASSWORD = 6;

            // Список ролей содержит некорректную (несуществующую) роль
            INVALID_ROLE_LIST = 7;

            // Имя роли зарезервировано системой
            ROLE_NAME_IS_RESERVED = 8;
        }
    }
}

message RemoveRoleRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Имя пользователя
    string role_name = 2;
}

message RemoveRoleResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: успешное удаление пользователя
        Success success = 1;

        // Результат запроса: ошибка удаления пользователя
        Error error = 2;
    }

    message Success {
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Пользователь является владельцем БД и не может быть удален
            ROLE_IS_DB_OWNER = 3;

            // Пользователь является предопределенным и не может быть удален
            ROLE_IS_PREDEFINED = 4;
        }
    }
}

message UpdateRoleRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Имя пользователя
    string role_name = 2;

    // Пароль
    string password = 3;

    // Сохранить пароль для доступа из Adminer
    bool save_adminer_password = 4;

    // Список ролей наследуемых пользователем
    repeated string parent_role = 5;
}

message UpdateRoleResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о пользователе
        Role role = 1;

        // Результат запроса: ошибка изменения пользователя
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Некорректный пароль
            INVALID_ACCESS_PASSWORD = 3;

            // Словарный пароль (находится в черном списке)
            BLACKLISTED_ACCESS_PASSWORD = 4;

            // Список ролей содержит некорректную (несуществующую) роль
            INVALID_ROLE_LIST = 5;

            // Пользователь является пердопределенным и не может быть изменен
            ROLE_IS_PREDEFINED = 6;
        }
    }
}

message UpdateDbRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Имя базы данных
    string db_name = 2;

    // Описание базы данных
    string description = 3;
}

message UpdateDbResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о базе данных
        Db db = 1;

        // Результат запроса: ошибка изменения информации о базе данных
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректное описание
            INVALID_DESCRIPTION = 2;
        }
    }
}

message GetRemoteAccessStateRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;
}

message GetRemoteAccessStateResponse {
    RemoteAccessState state = 1;
}

message UpdateRemoteAccessRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Адрес подсети в формате IP/Маска, например: 192.168.1.1/24
    // Пустой список - внешний доступ запрещен
    string subnet_address = 2;
}

message UpdateRemoteAccessResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: текущее состояние доступа со внешних адресов
        RemoteAccessState state = 1;

        // Результат запроса: ошибка добавления адреса подсети для внешнего доступа
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Некорректный формат адреса подсети
            INVALID_SUBNET_ADDRESS = 3;

            // IP уже добавлен или входит в ранее добавленную подсеть
            IP_IS_IN_EXISTED_SUBNET = 4;

            // Подсеть уже входит полностью или частично в добавленные ранее
            SUBNET_IS_IN_EXISTED_SUBNET = 5;

            // Подсеть является приватной
            SUBNET_IS_PRIVATE = 6;
        }
    }
}

message Postgresql15 {
    // Конфигурация базы данных
    Postgresql15Configuration configuration = 1;

    // Хост для подключения к базе данных
    string host = 2;

    // Порт для подключения к базе данных
    uint32 port = 3;

    // Адреса для доступа к управляемому сервису
    structures.AddressInfo address_info = 4;

    // Адрес Adminer
    string adminer_url = 5;

    // Размер использованного места на диске в байтах
    uint64 disk_used = 6;

    // Размер доступного места на диске в байтах
    uint64 disk_left = 7;

    // Включен ли режим "только для чтения"
    bool read_only = 8;

    // Adminer в процессе установки
    bool adminer_installing = 9;
}

message Postgresql14 {
    // Конфигурация базы данных
    Postgresql15Configuration configuration = 1;

    // Хост для подключения к базе данных
    string host = 2;

    // Порт для подключения к базе данных
    uint32 port = 3;

    // Адреса для доступа к управляемому сервису
    structures.AddressInfo address_info = 4;

    // Адрес Adminer
    string adminer_url = 5;

    // Размер использованного места на диске в байтах
    uint64 disk_used = 6;

    // Размер доступного места на диске в байтах
    uint64 disk_left = 7;

    // Включен ли режим "только для чтения"
    bool read_only = 8;

    // Adminer в процессе установки
    bool adminer_installing = 9;
}

message CreateParams {
    // Имя базы данных
    string db_name = 1;

    // Имя пользователя
    string role_name = 2;

    // Пароль для доступа к базе данных
    string access_password = 3;

    // Список параметров для конфигурации базы данных (необязательное поле)
    map<string, string> param = 4;

    // Тип конфигурации базы данных (default/custom) (необязательное поле)
    string preset_name = 5;

    // Сохранить пароль для доступа из Adminer
    bool save_adminer_password = 6;
}

message CreateError {
    // Описание ошибки
    string message = 1;

    // Код ошибки
    Code code = 2;

    enum Code {
        // Зарезервированный код ошибки
        _ = 0;

        // Недостаточно средств для создания сервиса
        INSUFFICIENT_FUNDS = 1;

        // Неизвестная конфигурация
        CONFIGURATION_NOT_FOUND = 2;

        // Некорректное название сервиса
        INVALID_DISPLAY_NAME = 3;

        // Некорректное описание
        INVALID_DESCRIPTION = 4;

        // Некорректное имя базы данных
        INVALID_DB_NAME = 5;

        // Некорректное имя пользователя
        INVALID_ROLE_NAME = 6;

        // Некорректный пароль
        INVALID_ACCESS_PASSWORD = 7;

        // Создание временно недоступно
        TEMPORARILY_UNAVAILABLE = 8;

        // Создание недоступно
        SERVICE_DISABLED = 9;

        // Словарный пароль (пароль находится в черном списке)
        BLACKLISTED_ACCESS_PASSWORD = 10;

        // Некорректные параметры конфигурации
        INVALID_CONFIG_PARAMS = 11;

        // Имя базы данных зарезервировано системой
        DB_NAME_IS_RESERVED = 12;

        // Имя пользователя зарезервировано системой
        ROLE_NAME_IS_RESERVED = 13;
    }
}

message Postgresql15Configuration {
    // Количество ядер процессора
    uint32 cpu_count = 1;

    // Размер диска в MB
    uint32 disk_size = 2;

    // Размер памяти в MB
    uint32 memory = 3;

    // Версия PostgreSQL
    string version = 4;

    // Отображаемая версия PostgreSQL
    string display_version = 5;

    // Список доступных параметров для конфигурации базы данных
    repeated structures.ConfigParam config_param = 6;

    // Список доступных пресетов параметров. Пресет по-умолчанию имеет имя "default"
    repeated Config config_preset = 7;
}

message Postgresql14Configuration {
    // Количество ядер процессора
    uint32 cpu_count = 1;

    // Размер диска в MB
    uint32 disk_size = 2;

    // Размер памяти в MB
    uint32 memory = 3;

    // Версия PostgreSQL
    string version = 4;

    // Отображаемая версия PostgreSQL
    string display_version = 5;

    // Список доступных параметров для конфигурации базы данных
    repeated structures.ConfigParam config_param = 6;

    // Список доступных пресетов параметров. Пресет по-умолчанию имеет имя "default"
    repeated Config config_preset = 7;
}

message Db {
    // Имя базы данных
    string name = 1;

    // Размер базы данных в байтах
    uint64 size = 2;

    // Имя пользователя владельца базы данных
    string owner = 3;

    // Описание базы данных
    string description = 5;
}

message Role {
    // Имя пользователя
    string name = 1;

    string password = 2;

    // Был ли сохранен пароль для доступа из Adminer
    bool adminer_password_saved = 3;

    // Список имен БД, доступных пользователю
    repeated string db_access = 4;

    // Список ролей наследуемых пользователем
    repeated string parent_role = 5;

    // Является ли пользователь предопределенным
    bool predefined = 6;
}

message Config {
    // Список параметров для конфигурации базы данных
    map<string, string> param = 1;

    // Тип конфигурации базы данных default/custom
    string preset_name = 2;
}

message RemoteAccessState {
    // Список Адресов подсети в формате IP/Маска, например: 192.168.1.1/24
    // Пустой список - внешний доступ запрещен
    repeated string subnet_address = 1;
}
